plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.0'
    id 'io.spring.dependency-management' version '1.1.6'
}

group = 'com.sparta'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

ext {
    set('springCloudVersion', "2024.0.0")
}

dependencies {
    implementation 'com.fasterxml.jackson.core:jackson-databind'
    implementation 'org.apache.commons:commons-lang3'
    implementation 'org.apache.commons:commons-text:1.10.0' //JaroWinklerSimilarity(두 글자 유사도 계산)
    implementation 'org.springframework.boot:spring-boot-starter-websocket' // 웹소켓
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor "com.querydsl:querydsl-apt:5.0.0:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"
    implementation 'org.springframework.boot:spring-boot-starter-batch'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    implementation 'org.springframework.boot:spring-boot-starter-quartz'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.apache.kafka:kafka-streams'
//    implementation 'org.springframework.cloud:spring-cloud-starter-zookeeper-discovery'
    implementation 'org.apache.kafka:kafka-clients'
    implementation 'org.slf4j:slf4j-simple:1.7.30'
    implementation 'org.springframework.kafka:spring-kafka'
    implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity6'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'com.fasterxml.jackson.core:jackson-databind'

    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'com.mysql:mysql-connector-j'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.batch:spring-batch-test'
    testImplementation 'org.springframework.kafka:spring-kafka-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    implementation 'at.favre.lib:bcrypt:0.9.0'
    // Jakarta Validation API
    implementation 'jakarta.validation:jakarta.validation-api:3.0.2'

    // Hibernate Validator (Jakarta Validation 구현체)
    implementation 'org.hibernate.validator:hibernate-validator:8.0.1.Final'

    // Optional: Annotation Processor (Validation 메시지용)
    annotationProcessor 'org.hibernate.validator:hibernate-validator:8.0.1.Final'

    // Spring Boot Starter Validation (Spring Boot 프로젝트에서 사용하는 경우)
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'



    implementation 'org.springframework.security:spring-security-oauth2-core'
    implementation 'org.springframework.security:spring-security-oauth2-client'
    implementation 'org.springframework.boot:spring-boot-starter-webflux' // 비동기 웹을 위한 의존성


    implementation 'com.cronutils:cron-utils:9.2.0'
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    //Cache
    implementation 'org.springframework.boot:spring-boot-starter-cache'

    implementation 'org.redisson:redisson-spring-boot-starter:3.24.3'


    implementation 'org.redisson:redisson-spring-boot-starter:3.24.3'

}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

tasks.named('test') {
    useJUnitPlatform()
}
